import sys
import os
import requests
import re


# Etherscan API
# Compound contract
# https://api.etherscan.io/api?module=contract&action=getsourcecode&address=0xc00e94cb662c3520282e6f5717214004a7f26888&apikey=5Q5XRN6BZHNNKPR2XW94F2RQWG91954C2K
REST_URL = "https://api.etherscan.io/api?apikey=5Q5XRN6BZHNNKPR2XW94F2RQWG91954C2K&module=contract&action=getsourcecode&address="
TEST_ADDR = "0xc00e94cb662c3520282e6f5717214004a7f26888"
PATTERNS = [".call(", "send(", ".delegatecall(", ".staticcall(", ".call{"]

# This funtion identifies all vulnearble points in one contract.
# Typically, caller call this recursively.
def findPatterns(src):
	ret = []
	for p in PATTERNS:
			if p in src:
				ret.append(p)
	return ret

# this returns a trimmed string of src file.
def readFile(srcPath):
    f = open(srcPath, "r")
    c = re.sub(r"[\n\t\s]*","", f.read())
    return c
    # print (c.strip(' \n\t'))

def getFileList(srcFolder):
    ret = []
    for r, d, f in os.walk(srcFolder):
        for file in f:
            if file.endswith(".sol"):
                ret.append(os.path.join(r, file))
    return ret

def parseSrcCode(contAddr, dappName):
	#build API
	r = requests.get(url = REST_URL + contAddr)
	data = r.json()

	#parse SourceCode
	#print (data["result"][0]["SourceCode"])

	#save sol file
	dstPath= "./contracts/" + dappName +"/"
	if not os.path.exists(dstPath):
		os.makedirs(dstPath)

	f = open ( dstPath + dappName + ".sol" , "w")
	f.write(str(data["result"][0]["SourceCode"]))
	f.close()

	#find vulnerable functions
	print ("finding vulnerable functions")
	srcList = getFileList(dstPath)
	for s in srcList:
		# '{1} {0}'.format('one', 'two')
		foundP = findPatterns(readFile(s))
		if (len(foundP) > 0):
				print ("Found a pattern {0} in {1}".format(foundP, s))

def main():
	if (len(sys.argv) > 1):
		contAddr = str(sys.argv[1])
		dappName = str(sys.argv[2])

	parseSrcCode(contAddr, dappName)

if __name__ == '__main__':
	main()
