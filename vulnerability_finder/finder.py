import os
import sys
import re


# TODO Think about these things
#1. which patterns that we want to find.
    #1.1 we need to trim all source code strings.
        # e.g., ( address.call() || address.call () )
#2. what information will be emitted by this script.
    #2-1. file name
    #2-2. the position of vulnerable patterns that it found (line no?)
        #2-2-1. is it possible? no.

patterns = [".call(", "send(", ".delegatecall("]

# This funtion identifies all vulnearble points in one contract.
# Typically, caller call this recursively.
def findPatterns(src):
    for p in patterns:
        if p in src:
            return p
    return ""

# this returns a trimmed string of src file.
def readFile(srcPath):
    f = open(srcPath, "r")
    c = re.sub(r"[\n\t\s]*","", f.read())
    return c
    # print (c.strip(' \n\t'))

def getFileList(srcFolder):
    ret = []
    for r, d, f in os.walk(srcFolder):
        for file in f:
            if file.endswith(".sol"):
                ret.append(os.path.join(r, file))
    return ret

def main():
    # Getting the current work directory (cwd)
    #print (str(sys.argv))
    #thisdir = os.getcwd()
    srcList = getFileList(str(sys.argv[1]))
    for s in srcList:
        # '{1} {0}'.format('one', 'two')
        foundP = findPatterns(readFile(s))
        if (foundP != ""):
            print ("Found a pattern {0} in {1}".format(foundP, s))

if __name__ == "__main__":
    main()
