==== Unprotected Ether Withdrawal ====
SWC ID: 105
Severity: High
Contract: Intermediary
Function name: withdraw()
PC address: 188
Estimated Gas Usage: 2598 - 37209
Anyone can withdraw ETH from the contract account.
Arbitrary senders other than the contract creator can withdraw ETH from the contract account. This is likely to be a vulnerability.
--------------------
In file: test_contracts/cr_myth.sol:33

msg.sender.transfer(amount)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1700000280005880, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeefvalue: 0x0
Caller: [SOMEGUY], function: unknown, txdata: 0x20024002, value: 0x1
Caller: [ATTACKER], function: withdraw(), txdata: 0x3ccfd60b, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Medium
Contract: Intermediary
Function name: constructor
PC address: 354
Estimated Gas Usage: 18607 - 118813
A call to a user-supplied address is executed.
An external message is sent to an address specified by the caller. Note that the callee account might contain arbitrary code and could re-enter any function with this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that state is no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: test_contracts/cr_myth.sol:28

IntermediaryCallback(_owner).registerIntermediary(address(this))

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: dededededededededededededededededededededededededededededededededededededededededededededeadbeefdeadbeefdeadbeefdeadbeefdeadbeefdededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededede, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Medium
Contract: Mallory
Function name: registerIntermediary(address)
PC address: 646
Estimated Gas Usage: 16793 - 126816
A call to a user-supplied address is executed.
An external message is sent to an address specified by the caller. Note that the callee account might contain arbitrary code and could re-enter any function with this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that state is no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: test_contracts/cr_myth.sol:104

bank.withdraw(bank.getBalance(address(this)))

--------------------
Initial State:

Account: [CREATOR], balance: 0x10000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x13000000004, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: attack(address,uint256), txdata: 0x52fba25c000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [SOMEGUY], function: registerIntermediary(address), txdata: 0x0242deb84242424242424242424242424242424242424242424242424242424242424242, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: Mallory
Function name: registerIntermediary(address)
PC address: 646
Estimated Gas Usage: 16793 - 126816
Multiple calls are executed in the same transaction.
This call is executed after a previous call in the same transaction. Try to isolate each call, transfer or send into its own transaction.
--------------------
In file: test_contracts/cr_myth.sol:104

bank.withdraw(bank.getBalance(address(this)))

--------------------
Initial State:

Account: [CREATOR], balance: 0x4, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: registerIntermediary(address), txdata: 0x0242deb84242424242424242424242424242424242424242424242424242424242424242, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Medium
Contract: Mallory
Function name: attack(address,uint256)
PC address: 945
Estimated Gas Usage: 23119 - 236975
A call to a user-supplied address is executed.
An external message is sent to an address specified by the caller. Note that the callee account might contain arbitrary code and could re-enter any function with this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that state is no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: test_contracts/cr_myth.sol:79

bank.deposit.value(amount)()

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: attack(address,uint256), txdata: 0x52fba25c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [ATTACKER], function: attack(address,uint256), txdata: 0x52fba25c000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State change after external call ====
SWC ID: 107
Severity: Medium
Contract: Mallory
Function name: attack(address,uint256)
PC address: 972
Estimated Gas Usage: 23119 - 236975
Persistent state read after call
The contract account state is changed after an external call to a user defined address. Consider that the called contract could re-enter the function before this state change takes place
--------------------
In file: test_contracts/cr_myth.sol:83

bank

--------------------
Initial State:

Account: [CREATOR], balance: 0x2000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x141040100000011, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: attack(address,uint256), txdata: 0x52fba25c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [SOMEGUY], function: attack(address,uint256), txdata: 0x52fba25c000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State change after external call ====
SWC ID: 107
Severity: Medium
Contract: Mallory
Function name: attack(address,uint256)
PC address: 1033
Estimated Gas Usage: 23119 - 236975
Persistent state read after call
The contract account state is changed after an external call to a user defined address. Consider that the called contract could re-enter the function before this state change takes place
--------------------
In file: test_contracts/cr_myth.sol:83

bank

--------------------
Initial State:

Account: [CREATOR], balance: 0x2000000040000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: attack(address,uint256), txdata: 0x52fba25c000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: Mallory
Function name: attack(address,uint256)
PC address: 1189
Estimated Gas Usage: 23119 - 236975
Multiple calls are executed in the same transaction.
This call is executed after a previous call in the same transaction. Try to isolate each call, transfer or send into its own transaction.
--------------------
In file: test_contracts/cr_myth.sol:83

bank.getBalance(address(this))

--------------------
Initial State:

Account: [CREATOR], balance: 0x2000000000010082, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: attack(address,uint256), txdata: 0x52fba25c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Medium
Contract: Mallory
Function name: attack(address,uint256)
PC address: 1302
Estimated Gas Usage: 23119 - 236975
A call to a user-supplied address is executed.
An external message is sent to an address specified by the caller. Note that the callee account might contain arbitrary code and could re-enter any function with this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that state is no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: test_contracts/cr_myth.sol:83

bank.withdraw(bank.getBalance(address(this)))

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: attack(address,uint256), txdata: 0x52fba25c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [ATTACKER], function: attack(address,uint256), txdata: 0x52fba25c000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: Mallory
Function name: attack(address,uint256)
PC address: 1302
Estimated Gas Usage: 23119 - 236975
Multiple calls are executed in the same transaction.
This call is executed after a previous call in the same transaction. Try to isolate each call, transfer or send into its own transaction.
--------------------
In file: test_contracts/cr_myth.sol:83

bank.withdraw(bank.getBalance(address(this)))

--------------------
Initial State:

Account: [CREATOR], balance: 0x28105040200004, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x89040000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: attack(address,uint256), txdata: 0x52fba25c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [ATTACKER], function: attack(address,uint256), txdata: 0x52fba25c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State change after external call ====
SWC ID: 107
Severity: Medium
Contract: Mallory
Function name: attack(address,uint256)
PC address: 1302
Estimated Gas Usage: 23119 - 236975
Persistent state write after call
The contract account state is changed after an external call to a user defined address. Consider that the called contract could re-enter the function before this state change takes place
--------------------
In file: test_contracts/cr_myth.sol:83

bank.withdraw(bank.getBalance(address(this)))

--------------------
Initial State:

Account: [CREATOR], balance: 0x2000000040000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: attack(address,uint256), txdata: 0x52fba25c000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State change after external call ====
SWC ID: 107
Severity: Medium
Contract: Mallory
Function name: attack(address,uint256)
PC address: 1329
Estimated Gas Usage: 23119 - 236975
Persistent state read after call
The contract account state is changed after an external call to a user defined address. Consider that the called contract could re-enter the function before this state change takes place
--------------------
In file: test_contracts/cr_myth.sol:85

i1

--------------------
Initial State:

Account: [CREATOR], balance: 0x2000000040000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: attack(address,uint256), txdata: 0x52fba25c000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Medium
Contract: Mallory
Function name: attack(address,uint256)
PC address: 1432
Estimated Gas Usage: 23119 - 236975
A call to a user-supplied address is executed.
An external message is sent to an address specified by the caller. Note that the callee account might contain arbitrary code and could re-enter any function with this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that state is no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: test_contracts/cr_myth.sol:85

i1.withdraw()

--------------------
Initial State:

Account: [CREATOR], balance: 0x100000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: registerIntermediary(address), txdata: 0x0242deb8dededededededededededededeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: attack(address,uint256), txdata: 0x52fba25c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State change after external call ====
SWC ID: 107
Severity: Medium
Contract: Mallory
Function name: attack(address,uint256)
PC address: 1432
Estimated Gas Usage: 23119 - 236975
Persistent state write after call
The contract account state is changed after an external call to a user defined address. Consider that the called contract could re-enter the function before this state change takes place
--------------------
In file: test_contracts/cr_myth.sol:85

i1.withdraw()

--------------------
Initial State:

Account: [CREATOR], balance: 0x2000000040000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: attack(address,uint256), txdata: 0x52fba25c000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State change after external call ====
SWC ID: 107
Severity: Medium
Contract: Mallory
Function name: attack(address,uint256)
PC address: 1459
Estimated Gas Usage: 23119 - 236975
Persistent state read after call
The contract account state is changed after an external call to a user defined address. Consider that the called contract could re-enter the function before this state change takes place
--------------------
In file: test_contracts/cr_myth.sol:86

i2

--------------------
Initial State:

Account: [CREATOR], balance: 0x2000000040000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: attack(address,uint256), txdata: 0x52fba25c000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State change after external call ====
SWC ID: 107
Severity: Low
Contract: Mallory
Function name: attack(address,uint256)
PC address: 1562
Estimated Gas Usage: 23119 - 236975
Persistent state write after call
The contract account state is changed after an external call to a fixed address. Consider that the called contract could re-enter the function before this state change takes place
--------------------
In file: test_contracts/cr_myth.sol:86

i2.withdraw()

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x1, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: attack(address,uint256), txdata: 0x52fba25c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Medium
Contract: Mallory
Function name: withdrawAll()
PC address: 1696
Estimated Gas Usage: 4910 - 74227
A call to a user-supplied address is executed.
An external message is sent to an address specified by the caller. Note that the callee account might contain arbitrary code and could re-enter any function with this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that state is no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: test_contracts/cr_myth.sol:115

i1.withdraw()

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: registerIntermediary(address), txdata: 0x0242deb8dededededededededededededeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: withdrawAll(), txdata: 0x853828b6, value: 0x0

==== Unprotected Ether Withdrawal ====
SWC ID: 105
Severity: High
Contract: Mallory
Function name: withdrawAll()
PC address: 1696
Estimated Gas Usage: 4910 - 74227
Anyone can withdraw ETH from the contract account.
Arbitrary senders other than the contract creator can withdraw ETH from the contract account. This is likely to be a vulnerability.
--------------------
In file: test_contracts/cr_myth.sol:115

i1.withdraw()

--------------------
Initial State:

Account: [CREATOR], balance: 0x10840000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x7000130080ff, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: attack(address,uint256), txdata: 0x52fba25c000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000000000000000000000000001, value: 0x1
Caller: [ATTACKER], function: withdrawAll(), txdata: 0x853828b6, value: 0x0

==== State change after external call ====
SWC ID: 107
Severity: Low
Contract: Mallory
Function name: withdrawAll()
PC address: 1723
Estimated Gas Usage: 4910 - 74227
Persistent state read after call
The contract account state is changed after an external call to a fixed address. Consider that the called contract could re-enter the function before this state change takes place
--------------------
In file: test_contracts/cr_myth.sol:116

i2

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: withdrawAll(), txdata: 0x853828b6, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: Mallory
Function name: withdrawAll()
PC address: 1826
Estimated Gas Usage: 4910 - 74227
Multiple calls are executed in the same transaction.
This call is executed after a previous call in the same transaction. Try to isolate each call, transfer or send into its own transaction.
--------------------
In file: test_contracts/cr_myth.sol:116

i2.withdraw()

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: withdrawAll(), txdata: 0x853828b6, value: 0x0


