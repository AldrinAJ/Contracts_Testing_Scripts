==== Integer Overflow ====
SWC ID: 101
Severity: High
Contract: Alice
Function name: transfer(address,uint256)
PC address: 422
Estimated Gas Usage: 8656 - 63738
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: 1_mythril.sol:15

sample + 1

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: transfer(address,uint256), txdata: 0xa9059cbb00000000000000000000000000402010200401010008002004800001104000040000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State change after external call ====
SWC ID: 107
Severity: Low
Contract: Alice
Function name: transfer(address,uint256)
PC address: 489
Estimated Gas Usage: 8656 - 63738
Persistent state read after call
The contract account state is changed after an external call to a fixed address. Consider that the called contract could re-enter the function before this state change takes place
--------------------
In file: 1_mythril.sol:15

balanceOf[_to] += sample + 1

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: transfer(address,uint256), txdata: 0xa9059cbb40404040404040404040404020020840400280204040400010014001020800044040404040404040404040404040404040404040404040404040404040404040, value: 0x0

==== Integer Overflow ====
SWC ID: 101
Severity: High
Contract: Alice
Function name: transfer(address,uint256)
PC address: 490
Estimated Gas Usage: 8656 - 63738
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: 1_mythril.sol:15

balanceOf[_to] += sample + 1

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: transfer(address,uint256), txdata: 0xa9059cbb40404040404040404040404010082004200840400102040001000108401001404040404040404040404040404040404040404040404040404040404040404040, value: 0x0
Caller: [SOMEGUY], function: transfer(address,uint256), txdata: 0xa9059cbb40404040404040404040404010082004200840400102040001000108401001404040404040404040404040404040404040404040404040404040404040404040, value: 0x0

==== State change after external call ====
SWC ID: 107
Severity: Low
Contract: Alice
Function name: transfer(address,uint256)
PC address: 496
Estimated Gas Usage: 8656 - 63738
Persistent state write after call
The contract account state is changed after an external call to a fixed address. Consider that the called contract could re-enter the function before this state change takes place
--------------------
In file: 1_mythril.sol:15

balanceOf[_to] += sample + 1

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: transfer(address,uint256), txdata: 0xa9059cbb40404040404040404040404020020840400280204040400010014001020800044040404040404040404040404040404040404040404040404040404040404040, value: 0x0


